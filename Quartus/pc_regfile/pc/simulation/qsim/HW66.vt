// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2020 23:32:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Adder_vlg_sample_tst(
	a_in,
	b_in,
	cin,
	sampler_tx
);
input [31:0] a_in;
input [31:0] b_in;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(a_in or b_in or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Adder_vlg_check_tst (
	cout,
	pin_name1,
	pin_name2,
	sum,
	sampler_rx
);
input  cout;
input  pin_name1;
input  pin_name2;
input [31:0] sum;
input sampler_rx;

reg  cout_expected;
reg  pin_name1_expected;
reg  pin_name2_expected;
reg [31:0] sum_expected;

reg  cout_prev;
reg  pin_name1_prev;
reg  pin_name2_prev;
reg [31:0] sum_prev;

reg  pin_name1_expected_prev;
reg  pin_name2_expected_prev;
reg [31:0] sum_expected_prev;

reg  last_pin_name1_exp;
reg  last_pin_name2_exp;
reg [31:0] last_sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	pin_name1_prev = pin_name1;
	pin_name2_prev = pin_name2;
	sum_prev = sum;
end

// update expected /o prevs

always @(trigger)
begin
	pin_name1_expected_prev = pin_name1_expected;
	pin_name2_expected_prev = pin_name2_expected;
	sum_expected_prev = sum_expected;
end


// expected sum[ 31 ]
initial
begin
	sum_expected[31] = 1'bX;
end 
// expected sum[ 30 ]
initial
begin
	sum_expected[30] = 1'bX;
end 
// expected sum[ 29 ]
initial
begin
	sum_expected[29] = 1'bX;
end 
// expected sum[ 28 ]
initial
begin
	sum_expected[28] = 1'bX;
end 
// expected sum[ 27 ]
initial
begin
	sum_expected[27] = 1'bX;
end 
// expected sum[ 26 ]
initial
begin
	sum_expected[26] = 1'bX;
end 
// expected sum[ 25 ]
initial
begin
	sum_expected[25] = 1'bX;
end 
// expected sum[ 24 ]
initial
begin
	sum_expected[24] = 1'bX;
end 
// expected sum[ 23 ]
initial
begin
	sum_expected[23] = 1'bX;
end 
// expected sum[ 22 ]
initial
begin
	sum_expected[22] = 1'bX;
end 
// expected sum[ 21 ]
initial
begin
	sum_expected[21] = 1'bX;
end 
// expected sum[ 20 ]
initial
begin
	sum_expected[20] = 1'bX;
end 
// expected sum[ 19 ]
initial
begin
	sum_expected[19] = 1'bX;
end 
// expected sum[ 18 ]
initial
begin
	sum_expected[18] = 1'bX;
end 
// expected sum[ 17 ]
initial
begin
	sum_expected[17] = 1'bX;
end 
// expected sum[ 16 ]
initial
begin
	sum_expected[16] = 1'bX;
end 
// expected sum[ 15 ]
initial
begin
	sum_expected[15] = 1'bX;
end 
// expected sum[ 14 ]
initial
begin
	sum_expected[14] = 1'bX;
end 
// expected sum[ 13 ]
initial
begin
	sum_expected[13] = 1'bX;
end 
// expected sum[ 12 ]
initial
begin
	sum_expected[12] = 1'bX;
end 
// expected sum[ 11 ]
initial
begin
	sum_expected[11] = 1'bX;
end 
// expected sum[ 10 ]
initial
begin
	sum_expected[10] = 1'bX;
end 
// expected sum[ 9 ]
initial
begin
	sum_expected[9] = 1'bX;
end 
// expected sum[ 8 ]
initial
begin
	sum_expected[8] = 1'bX;
end 
// expected sum[ 7 ]
initial
begin
	sum_expected[7] = 1'bX;
end 
// expected sum[ 6 ]
initial
begin
	sum_expected[6] = 1'bX;
end 
// expected sum[ 5 ]
initial
begin
	sum_expected[5] = 1'bX;
end 
// expected sum[ 4 ]
initial
begin
	sum_expected[4] = 1'bX;
end 
// expected sum[ 3 ]
initial
begin
	sum_expected[3] = 1'bX;
end 
// expected sum[ 2 ]
initial
begin
	sum_expected[2] = 1'bX;
end 
// expected sum[ 1 ]
initial
begin
	sum_expected[1] = 1'bX;
end 
// expected sum[ 0 ]
initial
begin
	sum_expected[0] = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 

// expected pin_name2
initial
begin
	pin_name2_expected = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or pin_name1_expected or pin_name1 or pin_name2_expected or pin_name2 or sum_expected or sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected pin_name1 = %b | expected pin_name2 = %b | expected sum = %b | ",cout_expected_prev,pin_name1_expected_prev,pin_name2_expected_prev,sum_expected_prev);
	$display("| real cout = %b | real pin_name1 = %b | real pin_name2 = %b | real sum = %b | ",cout_prev,pin_name1_prev,pin_name2_prev,sum_prev);
`endif
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( pin_name2_expected_prev !== 1'bx ) && ( pin_name2_prev !== pin_name2_expected_prev )
		&& ((pin_name2_expected_prev !== last_pin_name2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name2_expected_prev);
		$display ("     Real value = %b", pin_name2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pin_name2_exp = pin_name2_expected_prev;
	end
	if (
		( sum_expected_prev[0] !== 1'bx ) && ( sum_prev[0] !== sum_expected_prev[0] )
		&& ((sum_expected_prev[0] !== last_sum_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[0] = sum_expected_prev[0];
	end
	if (
		( sum_expected_prev[1] !== 1'bx ) && ( sum_prev[1] !== sum_expected_prev[1] )
		&& ((sum_expected_prev[1] !== last_sum_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[1] = sum_expected_prev[1];
	end
	if (
		( sum_expected_prev[2] !== 1'bx ) && ( sum_prev[2] !== sum_expected_prev[2] )
		&& ((sum_expected_prev[2] !== last_sum_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[2] = sum_expected_prev[2];
	end
	if (
		( sum_expected_prev[3] !== 1'bx ) && ( sum_prev[3] !== sum_expected_prev[3] )
		&& ((sum_expected_prev[3] !== last_sum_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[3] = sum_expected_prev[3];
	end
	if (
		( sum_expected_prev[4] !== 1'bx ) && ( sum_prev[4] !== sum_expected_prev[4] )
		&& ((sum_expected_prev[4] !== last_sum_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[4] = sum_expected_prev[4];
	end
	if (
		( sum_expected_prev[5] !== 1'bx ) && ( sum_prev[5] !== sum_expected_prev[5] )
		&& ((sum_expected_prev[5] !== last_sum_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[5] = sum_expected_prev[5];
	end
	if (
		( sum_expected_prev[6] !== 1'bx ) && ( sum_prev[6] !== sum_expected_prev[6] )
		&& ((sum_expected_prev[6] !== last_sum_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[6] = sum_expected_prev[6];
	end
	if (
		( sum_expected_prev[7] !== 1'bx ) && ( sum_prev[7] !== sum_expected_prev[7] )
		&& ((sum_expected_prev[7] !== last_sum_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[7] = sum_expected_prev[7];
	end
	if (
		( sum_expected_prev[8] !== 1'bx ) && ( sum_prev[8] !== sum_expected_prev[8] )
		&& ((sum_expected_prev[8] !== last_sum_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[8] = sum_expected_prev[8];
	end
	if (
		( sum_expected_prev[9] !== 1'bx ) && ( sum_prev[9] !== sum_expected_prev[9] )
		&& ((sum_expected_prev[9] !== last_sum_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[9] = sum_expected_prev[9];
	end
	if (
		( sum_expected_prev[10] !== 1'bx ) && ( sum_prev[10] !== sum_expected_prev[10] )
		&& ((sum_expected_prev[10] !== last_sum_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[10] = sum_expected_prev[10];
	end
	if (
		( sum_expected_prev[11] !== 1'bx ) && ( sum_prev[11] !== sum_expected_prev[11] )
		&& ((sum_expected_prev[11] !== last_sum_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[11] = sum_expected_prev[11];
	end
	if (
		( sum_expected_prev[12] !== 1'bx ) && ( sum_prev[12] !== sum_expected_prev[12] )
		&& ((sum_expected_prev[12] !== last_sum_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[12] = sum_expected_prev[12];
	end
	if (
		( sum_expected_prev[13] !== 1'bx ) && ( sum_prev[13] !== sum_expected_prev[13] )
		&& ((sum_expected_prev[13] !== last_sum_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[13] = sum_expected_prev[13];
	end
	if (
		( sum_expected_prev[14] !== 1'bx ) && ( sum_prev[14] !== sum_expected_prev[14] )
		&& ((sum_expected_prev[14] !== last_sum_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[14] = sum_expected_prev[14];
	end
	if (
		( sum_expected_prev[15] !== 1'bx ) && ( sum_prev[15] !== sum_expected_prev[15] )
		&& ((sum_expected_prev[15] !== last_sum_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[15] = sum_expected_prev[15];
	end
	if (
		( sum_expected_prev[16] !== 1'bx ) && ( sum_prev[16] !== sum_expected_prev[16] )
		&& ((sum_expected_prev[16] !== last_sum_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[16] = sum_expected_prev[16];
	end
	if (
		( sum_expected_prev[17] !== 1'bx ) && ( sum_prev[17] !== sum_expected_prev[17] )
		&& ((sum_expected_prev[17] !== last_sum_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[17] = sum_expected_prev[17];
	end
	if (
		( sum_expected_prev[18] !== 1'bx ) && ( sum_prev[18] !== sum_expected_prev[18] )
		&& ((sum_expected_prev[18] !== last_sum_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[18] = sum_expected_prev[18];
	end
	if (
		( sum_expected_prev[19] !== 1'bx ) && ( sum_prev[19] !== sum_expected_prev[19] )
		&& ((sum_expected_prev[19] !== last_sum_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[19] = sum_expected_prev[19];
	end
	if (
		( sum_expected_prev[20] !== 1'bx ) && ( sum_prev[20] !== sum_expected_prev[20] )
		&& ((sum_expected_prev[20] !== last_sum_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[20] = sum_expected_prev[20];
	end
	if (
		( sum_expected_prev[21] !== 1'bx ) && ( sum_prev[21] !== sum_expected_prev[21] )
		&& ((sum_expected_prev[21] !== last_sum_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[21] = sum_expected_prev[21];
	end
	if (
		( sum_expected_prev[22] !== 1'bx ) && ( sum_prev[22] !== sum_expected_prev[22] )
		&& ((sum_expected_prev[22] !== last_sum_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[22] = sum_expected_prev[22];
	end
	if (
		( sum_expected_prev[23] !== 1'bx ) && ( sum_prev[23] !== sum_expected_prev[23] )
		&& ((sum_expected_prev[23] !== last_sum_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[23] = sum_expected_prev[23];
	end
	if (
		( sum_expected_prev[24] !== 1'bx ) && ( sum_prev[24] !== sum_expected_prev[24] )
		&& ((sum_expected_prev[24] !== last_sum_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[24] = sum_expected_prev[24];
	end
	if (
		( sum_expected_prev[25] !== 1'bx ) && ( sum_prev[25] !== sum_expected_prev[25] )
		&& ((sum_expected_prev[25] !== last_sum_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[25] = sum_expected_prev[25];
	end
	if (
		( sum_expected_prev[26] !== 1'bx ) && ( sum_prev[26] !== sum_expected_prev[26] )
		&& ((sum_expected_prev[26] !== last_sum_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[26] = sum_expected_prev[26];
	end
	if (
		( sum_expected_prev[27] !== 1'bx ) && ( sum_prev[27] !== sum_expected_prev[27] )
		&& ((sum_expected_prev[27] !== last_sum_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[27] = sum_expected_prev[27];
	end
	if (
		( sum_expected_prev[28] !== 1'bx ) && ( sum_prev[28] !== sum_expected_prev[28] )
		&& ((sum_expected_prev[28] !== last_sum_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[28] = sum_expected_prev[28];
	end
	if (
		( sum_expected_prev[29] !== 1'bx ) && ( sum_prev[29] !== sum_expected_prev[29] )
		&& ((sum_expected_prev[29] !== last_sum_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[29] = sum_expected_prev[29];
	end
	if (
		( sum_expected_prev[30] !== 1'bx ) && ( sum_prev[30] !== sum_expected_prev[30] )
		&& ((sum_expected_prev[30] !== last_sum_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[30] = sum_expected_prev[30];
	end
	if (
		( sum_expected_prev[31] !== 1'bx ) && ( sum_prev[31] !== sum_expected_prev[31] )
		&& ((sum_expected_prev[31] !== last_sum_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sum_exp[31] = sum_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a_in;
reg [31:0] b_in;
reg cin;
// wires                                               
wire cout;
wire pin_name1;
wire pin_name2;
wire [31:0] sum;

wire sampler;                             

// assign statements (if any)                          
Adder i1 (
// port map - connection between master ports and signals/registers   
	.a_in(a_in),
	.b_in(b_in),
	.cin(cin),
	.cout(cout),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.sum(sum)
);
// a_in[ 31 ]
initial
begin
	a_in[31] = 1'b0;
end 
// a_in[ 30 ]
initial
begin
	a_in[30] = 1'b0;
end 
// a_in[ 29 ]
initial
begin
	a_in[29] = 1'b0;
end 
// a_in[ 28 ]
initial
begin
	a_in[28] = 1'b0;
end 
// a_in[ 27 ]
initial
begin
	a_in[27] = 1'b0;
end 
// a_in[ 26 ]
initial
begin
	a_in[26] = 1'b0;
end 
// a_in[ 25 ]
initial
begin
	a_in[25] = 1'b0;
end 
// a_in[ 24 ]
initial
begin
	a_in[24] = 1'b0;
end 
// a_in[ 23 ]
initial
begin
	a_in[23] = 1'b0;
end 
// a_in[ 22 ]
initial
begin
	a_in[22] = 1'b0;
end 
// a_in[ 21 ]
initial
begin
	a_in[21] = 1'b0;
end 
// a_in[ 20 ]
initial
begin
	a_in[20] = 1'b0;
end 
// a_in[ 19 ]
initial
begin
	a_in[19] = 1'b0;
end 
// a_in[ 18 ]
initial
begin
	a_in[18] = 1'b0;
end 
// a_in[ 17 ]
initial
begin
	a_in[17] = 1'b0;
end 
// a_in[ 16 ]
initial
begin
	a_in[16] = 1'b0;
end 
// a_in[ 15 ]
initial
begin
	a_in[15] = 1'b0;
end 
// a_in[ 14 ]
initial
begin
	a_in[14] = 1'b0;
end 
// a_in[ 13 ]
initial
begin
	a_in[13] = 1'b0;
end 
// a_in[ 12 ]
initial
begin
	a_in[12] = 1'b0;
end 
// a_in[ 11 ]
initial
begin
	a_in[11] = 1'b0;
end 
// a_in[ 10 ]
initial
begin
	a_in[10] = 1'b0;
end 
// a_in[ 9 ]
initial
begin
	a_in[9] = 1'b0;
end 
// a_in[ 8 ]
initial
begin
	a_in[8] = 1'b0;
end 
// a_in[ 7 ]
initial
begin
	a_in[7] = 1'b0;
end 
// a_in[ 6 ]
initial
begin
	a_in[6] = 1'b0;
end 
// a_in[ 5 ]
initial
begin
	a_in[5] = 1'b0;
end 
// a_in[ 4 ]
initial
begin
	a_in[4] = 1'b0;
end 
// a_in[ 3 ]
initial
begin
	a_in[3] = 1'b0;
end 
// a_in[ 2 ]
initial
begin
	a_in[2] = 1'b1;
end 
// a_in[ 1 ]
initial
begin
	a_in[1] = 1'b0;
end 
// a_in[ 0 ]
initial
begin
	a_in[0] = 1'b1;
end 
// b_in[ 31 ]
initial
begin
	b_in[31] = 1'b0;
end 
// b_in[ 30 ]
initial
begin
	b_in[30] = 1'b0;
end 
// b_in[ 29 ]
initial
begin
	b_in[29] = 1'b0;
end 
// b_in[ 28 ]
initial
begin
	b_in[28] = 1'b0;
end 
// b_in[ 27 ]
initial
begin
	b_in[27] = 1'b0;
end 
// b_in[ 26 ]
initial
begin
	b_in[26] = 1'b0;
end 
// b_in[ 25 ]
initial
begin
	b_in[25] = 1'b0;
end 
// b_in[ 24 ]
initial
begin
	b_in[24] = 1'b0;
end 
// b_in[ 23 ]
initial
begin
	b_in[23] = 1'b0;
end 
// b_in[ 22 ]
initial
begin
	b_in[22] = 1'b0;
end 
// b_in[ 21 ]
initial
begin
	b_in[21] = 1'b0;
end 
// b_in[ 20 ]
initial
begin
	b_in[20] = 1'b0;
end 
// b_in[ 19 ]
initial
begin
	b_in[19] = 1'b0;
end 
// b_in[ 18 ]
initial
begin
	b_in[18] = 1'b0;
end 
// b_in[ 17 ]
initial
begin
	b_in[17] = 1'b0;
end 
// b_in[ 16 ]
initial
begin
	b_in[16] = 1'b0;
end 
// b_in[ 15 ]
initial
begin
	b_in[15] = 1'b0;
end 
// b_in[ 14 ]
initial
begin
	b_in[14] = 1'b0;
end 
// b_in[ 13 ]
initial
begin
	b_in[13] = 1'b0;
end 
// b_in[ 12 ]
initial
begin
	b_in[12] = 1'b0;
end 
// b_in[ 11 ]
initial
begin
	b_in[11] = 1'b0;
end 
// b_in[ 10 ]
initial
begin
	b_in[10] = 1'b0;
end 
// b_in[ 9 ]
initial
begin
	b_in[9] = 1'b0;
end 
// b_in[ 8 ]
initial
begin
	b_in[8] = 1'b0;
end 
// b_in[ 7 ]
initial
begin
	b_in[7] = 1'b0;
end 
// b_in[ 6 ]
initial
begin
	b_in[6] = 1'b0;
end 
// b_in[ 5 ]
initial
begin
	b_in[5] = 1'b0;
end 
// b_in[ 4 ]
initial
begin
	b_in[4] = 1'b0;
end 
// b_in[ 3 ]
initial
begin
	b_in[3] = 1'b0;
end 
// b_in[ 2 ]
initial
begin
	b_in[2] = 1'b0;
end 
// b_in[ 1 ]
initial
begin
	b_in[1] = 1'b1;
end 
// b_in[ 0 ]
initial
begin
	b_in[0] = 1'b1;
end 

// cin
initial
begin
	cin = 1'b0;
end 

Adder_vlg_sample_tst tb_sample (
	.a_in(a_in),
	.b_in(b_in),
	.cin(cin),
	.sampler_tx(sampler)
);

Adder_vlg_check_tst tb_out(
	.cout(cout),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.sum(sum),
	.sampler_rx(sampler)
);
endmodule

